# ubunt22.04にpython、poetryを入れる
sudo apt update
sudo apt upgrade -y
sudo apt install python3.11
python3.11 --version
Poetryのインストール
curl -sSL https://install.python-poetry.org | python3.11 -

2. シェル設定ファイルの更新
Poetryのインストールパスをシェルの設定ファイル（例：~/.bashrcまたは~/.zshrc）に追加します。
echo 'export PATH="$HOME/.local/bin:$PATH"' >> ~/.bashrc
source ~/.bashrc
poetry --version

ubuntのレポジトリにpython3.11がなければ、
デッドスネークスPPAの追加
sudo add-apt-repository ppa:deadsnakes/ppa
sudo apt update

Python 3.11のインストール
sudo apt install python3.11



#git初期設定
git config --global user.name "Your Name"
git config --global user.email "youremail@example.com"
git config --global color.ui auto

git clone 

git add .gitignore
git commit -m "Add .gitignore to exclude specific files and folders"


git初期設定関連
https://qiita.com/ucan-lab/items/aadbedcacbc2ac86a2b3

もしくはgithubトークンでの認証
https://qiita.com/sin9270/items/aaebfa66865280d6c3d7

python用vscode設定(ruffを使用)
https://blog.teclado.com/how-to-set-up-visual-studio-code-for-python-development/

fastapiのドキュメントのドキュメント
https://github.com/mjhea0/awesome-fastapi?tab=readme-ov-file#databases

fastapiの参考になるコード
https://github.com/jod35/fastapi-beyond-CRUD/tree/main
https://github.com/jod35/Noted-FastAPI/blob/main/crud.py
https://github.com/Describly/fastapi-tdd-user-authentication/blob/main/app/services/user.py


コンテナ内で	fastapiをデバッカーをつくる
参考)https://note.com/mizutory/n/nffaf64d60708

debugpyをpoetryに入れる(poetry)
.vscode にlauch.jsonをつくる
{
    "version": "0.2.0",
    "configurations": [
      {
        "name": "Python: Attach to FastAPI",
        "type": "debugpy",
        "request": "attach",
        "connect": {
          "host": "0.0.0.0",
          "port": 5678
        },
        "pathMappings": [
          {
            "localRoot": "${workspaceFolder}/app",
            "remoteRoot": "/app/app"
          }
        ],
        "justMyCode": true
      }
    ]
  }



#プロジェクト初日に行うこと
1. プロジェクト環境のセットアップ
プロジェクトのリポジトリにアクセスし、ローカルにクローンします。
使用するプログラミング言語やフレームワークの依存関係をインストールします（Pythonプロジェクトの場合は requirements.txt や Pipfile を使います）。
開発環境を構築します。例えば、IDEの設定やDocker、仮想環境の構築を行います。
ローカル環境でアプリケーションが正常に動作するか確認します（テストの実行やサーバーの起動など）。
2. プロジェクトの概要とドキュメントの確認
README、CONTRIBUTINGガイド、APIドキュメントなどを確認し、プロジェクトの概要や目的を理解します。
メインのディレクトリ構造や重要なファイルをざっと見て、コード全体の設計を把握します。
3. チームとのコミュニケーション
チームと挨拶し、自己紹介をします。プロジェクトのコミュニケーションチャンネル（Slack、Teams、メールなど）を確認します。
プロジェクトマネージャーやリーダー、開発メンバーなどの担当者を把握します。
不明点をまとめ、適宜質問できるように準備します。
4. プロジェクトの開発プロセスの理解
チームがどのようにコードレビューを行うか、ブランチ戦略（Git Flowなど）、リリースサイクルを確認します。
JIRA、Trello、GitHub Projects などのタスク管理ツールの使い方を確認し、初日にアサインされるタスクをチェックします。
5. 初日のタスク実施
環境構築が完了し、プロジェクトの概要がつかめたら、初日の簡単なタスク（ドキュメントの更新や小さなバグの修正など）に取り組みます。
6. 開発環境の確認
バグ報告や機能リクエストがどのように管理されているか（JIRA、GitHub Issues など）を確認します。
CI/CDパイプラインについて確認し、テストやデプロイがどのように自動化されているかを理解します。
7. ドキュメントの更新
環境セットアップの際に気付いた不明点や改善点をドキュメントに追記し、プロジェクトへの早期の貢献を行います。


#wslのインストール
[コントロール パネル] ->[プログラムと機能] ->[Windows の機能の有効化または無効化] を開いて、[Linux 用 Windows サブシステム] をチェックするか、この記事の冒頭に記載された PowerShell コマンドレットを使用します。

手順1: WSLを有効化する
PowerShellを管理者として実行

スタートメニューで「PowerShell」と検索し、右クリックして「管理者として実行」を選択します。
WSLの有効化
以下のコマンドをPowerShellで実行して、WSLと仮想マシンプラットフォームを有効にします。

powershell
wsl --install
このコマンドを実行すると、WSLの最新バージョン（現在はWSL 2）と既定のLinuxディストリビューション（Ubuntu）が自動的にインストールされます。既定では最新のLTS版（現時点ではUbuntu 22.04）がインストールされます。

PCの再起動
WSLの有効化が完了したら、PCを再起動します。

手順2: Ubuntu 22.04をインストールする
Ubuntuのインストール
再起動後、自動的にUbuntuのインストールが開始されます。まだインストールされていない場合は、次のコマンドで手動でインストールします。
wsl --install -d Ubuntu-22.04
wsl -l -v

エラーが出た場合は、以下を参考に
https://qiita.com/kanamekun/items/63d93034fbe919a58fca

#docekrインストール
必要なパッケージのインストール
sudo apt update
sudo apt install -y ca-certificates curl gnupg lsb-release

Docker公式のGPGキーを追加
sudo mkdir -p /etc/apt/keyrings
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg

Dockerリポジトリを追加
echo \
  "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
  $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

Dockerのインストール
sudo apt update
sudo apt install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin

Dockerのインストール
sudo service docker start
sudo systemctl enable docker

Dockerサービスの起動と有効化
sudo service docker start
sudo systemctl enable docker

権限の設定
ユーザーをdockerグループに追加
sudo usermod -aG docker $USER

変更を反映するためにターミナルを再起動

動作確認
docker run hello-world
docker compose version

#gitインストール
sudo apt update
sudo apt install git -y

git config --global user.name "あなたの名前"
git config --global user.email "あなたのメールアドレス"

git config --list


